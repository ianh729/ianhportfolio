{"version":3,"sources":["images/floatingIslands.jpg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","App","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","document","body","appendChild","domElement","geometry","material","color","cube","add","position","z","pointLight","set","ambientLight","lightHelper","gridHelper","OrbitControls","Array","fill","forEach","star","map","randFloatSpread","x","y","background","load","animate","requestAnimationFrame","rotation","render","Component","rootElement","getElementById","ReactDOM","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,6C,6OCOrCC,E,uKACJ,WAEE,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KAErFC,EAAW,IAAIL,IACnBK,EAASC,QAASJ,OAAOC,WAAYD,OAAOE,aAC5CG,SAASC,KAAKC,YAAaJ,EAASK,YAEpC,IAAIC,EAAW,IAAIX,IAAmB,EAAG,EAAG,GACxCY,EAAW,IAAIZ,IAAyB,CAAEa,MAAO,QACjDC,EAAO,IAAId,IAAYW,EAAUC,GACrCb,EAAMgB,IAAKD,GAEXb,EAAOe,SAASC,EAAI,EAEpB,IAAMC,EAAa,IAAIlB,IAAiB,SAAU,GAClDkB,EAAWF,SAASG,IAAI,EAAG,EAAG,GAC9B,IAAMC,EAAe,IAAIpB,IAAmB,SAAU,IACtDD,EAAMgB,IAAKG,EAAYE,GAEvB,IAAMC,EAAc,IAAIrB,IAAuBkB,GACzCI,EAAa,IAAItB,IAAiB,IAAK,IAC7CD,EAAMgB,IAAIM,EAAaC,GAEN,IAAIC,IAActB,EAAQI,EAASK,YAepDc,MAAM,KAAKC,OAAOC,SAblB,WACE,IAAMf,EAAW,IAAIX,IAAqB,IAAM,GAAI,IAC9CY,EAAW,IAAIZ,IAAwB,CAACa,MAAO,WAC/Cc,EAAO,IAAI3B,IAAWW,EAAUC,GAEtC,EAAkBY,MAAM,GACrBC,OACAG,KAAI,kBAAM5B,IAAgB6B,gBAAgB,QAF7C,mBAAOC,EAAP,KAAUC,EAAV,KAAad,EAAb,KAIAU,EAAKX,SAASG,IAAIW,EAAGC,EAAGd,GACxBlB,EAAMgB,IAAIY,MAMZ5B,EAAMiC,YAAa,IAAIhC,KAAsBiC,KAAKD,MAEpC,SAAVE,IACFC,sBAAuBD,GACvBpB,EAAKsB,SAASN,GAAK,IACnBhB,EAAKsB,SAASL,GAAK,IACnB1B,EAASgC,OAAQtC,EAAOE,GAE1BiC,K,oBAGF,WACE,OACE,kC,GAzDYI,aA6DZC,EAAchC,SAASiC,eAAe,QAC5CC,IAASJ,OAAO,kBAAC,EAAD,MAASE,GA0BVzC,QCnFA4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdF,IAASJ,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASiC,eAAe,SAM1BE,M","file":"static/js/main.01c9d693.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/floatingIslands.3d083edf.jpg\";","import background from './images/floatingIslands.jpg';\nimport './App.css';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    \n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n\n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshPhongMaterial( { color: 0x00ff00 } );\n    var cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n\n    camera.position.z = 5;\n\n    const pointLight = new THREE.PointLight(0xffffff, 1);\n    pointLight.position.set(0, 0, 3);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add( pointLight, ambientLight );\n    \n    const lightHelper = new THREE.PointLightHelper(pointLight)\n    const gridHelper = new THREE.GridHelper(200, 50)\n    scene.add(lightHelper, gridHelper)\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    function addStar() {\n      const geometry = new THREE.SphereGeometry(0.25, 24, 24);\n      const material = new THREE.MeshBasicMaterial({color: 0xffffff});\n      const star = new THREE.Mesh(geometry, material)\n    \n      const [x, y, z] = Array(3)\n        .fill()\n        .map(() => THREE.MathUtils.randFloatSpread(100));\n    \n      star.position.set(x, y, z);\n      scene.add(star);\n    }\n    \n    Array(200).fill().forEach(addStar);\n\n    //const backgroundTexture = new THREE.TextureLoader().load('./images/floatingIslands.jpg');\n    scene.background = new THREE.TextureLoader().load(background);\n\n    var animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div />\n    )\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n// function App() {\n//   // === THREE.JS CODE START ===\n  \n//   // === THREE.JS EXAMPLE CODE END ===\n//   // return (\n//   //   <div className=\"App\">\n//   //     <header className=\"App-header\">\n//   //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//   //       <p>\n//   //         Edit <code>src/App.js</code> and save to reload.\n//   //       </p>\n//   //       <a\n//   //         className=\"App-link\"\n//   //         href=\"https://reactjs.org\"\n//   //         target=\"_blank\"\n//   //         rel=\"noopener noreferrer\"\n//   //       >\n//   //         Learn React\n//   //       </a>\n//   //     </header>\n//   //   </div>\n//   // );\n\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}